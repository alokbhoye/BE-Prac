
pragma solidity ^0.8.0;

contract StudentData {
    struct Student {
        uint256 id;
        string name;
        uint256 age;
        uint256 grade;
    }


    Student[] public students;


    mapping(uint256 => uint256) private idToIndex;


    fallback() external payable {}


    receive() external payable {}


    function addStudent(uint256 _id, string memory _name, uint256 _age, uint256 _grade) public {
        require(idToIndex[_id] == 0, "Student ID already exists."); // Ensure ID is unique
        students.push(Student(_id, _name, _age, _grade));
        idToIndex[_id] = students.length - 1; // Store the index for the student ID
    }


    function getStudentById(uint256 _id) public view returns (Student memory) {
        uint256 index = idToIndex[_id];
        require(index < students.length, "Invalid student ID.");
        return students[index];
    }


    function getAllStudents() public view returns (Student[] memory) {
        return students;
    }
}
